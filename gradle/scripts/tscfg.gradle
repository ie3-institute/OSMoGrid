////////////////////////////////////////////////////////////////////////////
// Generate config classes reflecting the osmogrid-config-tempalte.conf template file
////////////////////////////////////////////////////////////////////////////
task genConfigClass {
  doLast {
    def tscfgJarFile = layout.buildDirectory.file('tscfg-' + tscfgVersion + '.jar').get().asFile
    if (!tscfgJarFile.exists() || !tscfgJarFile.isFile()) {
      download.run {
        src 'https://github.com/carueda/tscfg/releases/download/v' + tscfgVersion + '/tscfg-' + tscfgVersion + '.jar'
        dest layout.buildDirectory.get()
      }
    }
    javaexec {
      main = "-jar"
      args = [
        "build/tscfg-${tscfgVersion}.jar",
        "--spec",
        "src/main/resources/config/config-template.conf",
        "--scala",
        "--durations",
        "--pn",
        "edu.ie3.osmogrid.cfg",
        "--cn",
        "OsmoGridConfig",
        "--dd",
        "src/main/scala/edu/ie3/osmogrid/cfg/"
      ]
    }
  }
}

////////////////////////////////////////////////////////////////////////////
// Generate sample config file reflecting the application.conf template file
// This can be used to setup a new simulation configuration
////////////////////////////////////////////////////////////////////////////
task genConfigSample {
  doLast {
    def tscfgJarFile = layout.buildDirectory.file('tscfg-' + tscfgVersion + '.jar').get().asFile
    if (!tscfgJarFile.exists() || !tscfgJarFile.isFile()) {
      download.run {
        src 'https://github.com/carueda/tscfg/releases/download/v' + tscfgVersion + '/tscfg-' + tscfgVersion + '.jar'
        dest layout.buildDirectory.get()
      }
    }
    javaexec {
      main = "-jar"
      args = [
        "build/tscfg-${tscfgVersion}.jar",
        "--spec",
        "src/main/resources/config/config-template.conf",
        "--tpl",
        "configs/osmogrid/OSMoGrid_sample.conf"
      ]
    }
  }
}
