@startuml
'https://plantuml.com/sequence-diagram

!theme plain
autonumber

boundary Main
database Input
participant InputDataProvider
participant OsmoGridGuardian
participant RunGuardian
participant LvCoordinator
participant LvRegionCoordinator
participant LvGridGenerator
participant ResultListener

==Init==
Main --> OsmoGridGuardian: //Start//
Main -> OsmoGridGuardian: <font color="red">!</font>Run(OsmoGridConfig)
OsmoGridGuardian --> RunGuardian: //Spawn//
note right: Death watch of\n""RunGuardian""
OsmoGridGuardian -> RunGuardian: <font color="red">!</font>Run
RunGuardian --> InputDataProvider: //Spawn//

note left: Death watch of\n""InputDataProvider""
RunGuardian --> ResultListener: //Spawn//
note right: Death watch of\n""ResultListener""

==LV generation==
RunGuardian --> LvCoordinator: //Spawn//
note right: Death watch of\n""LvCoordinator""
RunGuardian -> LvCoordinator: <font color="red">!</font>ReqLvGrids
LvCoordinator -> InputDataProvider: <font color="red">!</font>ReqOsm(...)
InputDataProvider <--> Input: //Read//
LvCoordinator -> InputDataProvider: <font color="red">!</font>ReqAssetTypes(...)
InputDataProvider <--> Input: //Read//
InputDataProvider -> LvCoordinator: <font color="red">!</font>RepOsm(OsmModel)
InputDataProvider -> LvCoordinator: <font color="red">!</font>RepAssetTypes(AssetInformation)
LvCoordinator -> LvCoordinator: <font color="red">!</font>StartGeneration(...)
LvCoordinator --> LvRegionCoordinator: //Spawn//

LvCoordinator -> LvRegionCoordinator: <font color="red">!</font>Partition(...)
LvRegionCoordinator --> LvRegionCoordinator: //Spawn//
LvRegionCoordinator -> LvRegionCoordinator: <font color="red">!</font>Partition(...)
... **Recursively spawn and divide regions until lowest administrative boundary level is reached** ...

LvRegionCoordinator --> LvGridGenerator: //Spawn one per secondary//\n//substation region//
LvRegionCoordinator -> LvCoordinator: <font color="red">!</font>GridToExpect(UUID)
LvRegionCoordinator -> LvGridGenerator: <font color="red">!</font>GenerateGrid(...)

activate LvGridGenerator
... ...
LvGridGenerator -> LvCoordinator: <font color="red">!</font>RepLvGrid(UUID, Seq[SubGridContainer])
deactivate LvGridGenerator

... **Report back if all expected grids are received** ...
LvCoordinator -> RunGuardian: <font color="red">!</font>RepLvGrids(Seq[SubGridContainer])

==MV generation==
... **To be defined in a later stage** ...

== Result handling ==
RunGuardian -> ResultListener: <font color="red">!</font>GridResult(JointGridContainer)
activate ResultListener
... ...
ResultListener -> RunGuardian: <font color="red">!</font>ResultListenerDied
deactivate ResultListener
RunGuardian -> LvCoordinator: <font color="red">!</font>Terminate
RunGuardian -> InputDataProvider: <font color="red">!</font>Terminate
InputDataProvider <--> Input: //Close//
InputDataProvider -> RunGuardian: <font color="red">!</font>InputDataProviderDied

RunGuardian -> OsmoGridGuardian: <font color="red">!</font>RunGuardianDied
OsmoGridGuardian --> Main: //Done//

@enduml
