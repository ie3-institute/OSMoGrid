@startuml
'https://plantuml.com/sequence-diagram

!theme plain
autonumber

boundary Main
database Input
participant InputDataProvider
participant OsmoGridGuardian
participant LvCoordinator
participant "LvRegionCoordinator<sub>n</sub>"
participant "LvRegionCoordinator<sub>n-...</sub>"
participant MunicipalityCoordinator
collections DistrictCoordinator
collections SubDistrictCoordinator
collections LvRegionCoordinator
collections LvGridGenerator
participant ResultListener

== Init ==
Main -> OsmoGridGuardian: Run(cfg)
OsmoGridGuardian --> InputDataProvider: //Spawn//

OsmoGridGuardian --> ResultListener: //Spawn//
note right: Death watch of\n""ResultListener""

== LV generation ==
OsmoGridGuardian --> LvCoordinator: //Spawn//
OsmoGridGuardian -> LvCoordinator: <font color="red">!</font>ReqLvGrids(...)
LvCoordinator -> InputDataProvider: <font color="red">!</font>ReqOsm(...)
InputDataProvider <--> Input: //Read//
LvCoordinator -> InputDataProvider: <font color="red">!</font>ReqAssetTypes(...)
InputDataProvider <--> Input: //Read//
InputDataProvider -> LvCoordinator: <font color="red">!</font>RepOsm(...)
InputDataProvider -> LvCoordinator: <font color="red">!</font>RepAssetTypes(...)
note right: Determine the highest\nadministrative boundary //n//
LvCoordinator --> "LvRegionCoordinator<sub>n</sub>": //Spawn//
LvCoordinator --> DistrictCoordinator: //Spawn worker pool//
LvCoordinator --> SubDistrictCoordinator: //Spawn worker pool//
LvCoordinator --> LvGridGenerator: //Spawn worker pool//
LvCoordinator --> LvRegionCoordinator: //Spawn worker pool//

==Partition regions==

LvCoordinator -> "LvRegionCoordinator<sub>n</sub>": <font color="red">!</font>Partition(Region, n)
"LvRegionCoordinator<sub>n</sub>" --> "LvRegionCoordinator<sub>n-...</sub>": //Spawn//
"LvRegionCoordinator<sub>n</sub>" -> "LvRegionCoordinator<sub>n-...</sub>": <font color="red">!</font>Partition(Region, n-1)
"LvRegionCoordinator<sub>n-...</sub>" --> "LvRegionCoordinator<sub>n-...</sub>": //Spawn//
"LvRegionCoordinator<sub>n-...</sub>" -> "LvRegionCoordinator<sub>n-...</sub>": <font color="red">!</font>Partition(Region, n-1)
note right: Administrative boundary\nof municipality reached

"LvRegionCoordinator<sub>n-...</sub>" --> MunicipalityCoordinator: //Spawn//
"LvRegionCoordinator<sub>n-...</sub>" -> MunicipalityCoordinator: <font color="red">!</font>HandleMunicipality(Region)

MunicipalityCoordinator -> DistrictCoordinator: <font color="red">!</font>HandleDistrict(Region)

DistrictCoordinator -> SubDistrictCoordinator: <font color="red">!</font>HandleSubDistrict(Region)

SubDistrictCoordinator -> LvGridGenerator: <font color="red">!</font>BuildGridModel(Region)

'TODO: Refactor from here

activate LvGridGenerator
... ...
LvGridGenerator -> LvCoordinator: <font color="red">!</font>PepLvGrid(...)
deactivate LvGridGenerator

LvCoordinator -> OsmoGridGuardian: <font color="red">!</font>RepLvGrids(...)

== MV generation ==
... **To be defined in a later stage** ...

== Result handling ==
OsmoGridGuardian -> ResultListener: <font color="red">!</font>GridResult(...)
activate ResultListener
... ...
ResultListener -> OsmoGridGuardian: <font color="red">!</font>ResultListenerDied
deactivate ResultListener
OsmoGridGuardian -> InputDataProvider: <font color="red">!</font>Terminate(...)
InputDataProvider <--> Input: //Close//
InputDataProvider -> OsmoGridGuardian: <font color="red">!</font>InputDataProviderDied

OsmoGridGuardian -> Main: <font color="red">!</font>Done

'TODO: Don't forget to spawn and initialize the ResultListener

@enduml
