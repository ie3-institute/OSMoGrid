@startuml
'https://plantuml.com/sequence-diagram

!theme plain

autonumber

boundary Main
database Input
participant InputDataProvider
participant OsmoGridGuardian
participant LvGenerator
collections LvGraphHandler
collections LvGridGenerator
participant ResultListener

== Init ==
Main -> OsmoGridGuardian: Run(cfg)
OsmoGridGuardian --> InputDataProvider: //Spawn//
OsmoGridGuardian -> InputDataProvider: !Init(cfg)
InputDataProvider -> OsmoGridGuardian: !InitComplete

OsmoGridGuardian --> ResultListener: //Spawn//
OsmoGridGuardian -> ResultListener: !Init(..)
ResultListener -> OsmoGridGuardian: !InitComplete(...)

== LV generation ==
OsmoGridGuardian --> LvGenerator: //Spawn//
OsmoGridGuardian -> LvGenerator: !Init(cfg)
LvGenerator -> OsmoGridGuardian: !InitComplete

OsmoGridGuardian -> LvGenerator: !Run(cfg, ...)

LvGenerator -> InputDataProvider: !GetOsm(...)
LvGenerator -> InputDataProvider: !GetAssetTypes(...)
note right: Contains information,\n that LV level is targeted
InputDataProvider <--> Input: //Read//
InputDataProvider -> LvGenerator: !ProvideOsm(...)
note right: Scissor osm along\nmunicipality boundaries

InputDataProvider -> LvGenerator: !ProvideAssetTypes(...)
LvGenerator --> LvGridGenerator: //Spawn//
LvGenerator -> LvGridGenerator: !Init(...)
LvGridGenerator -> LvGenerator: !InitComplete

LvGenerator -> LvGraphHandler: !Run(...)
note right: Start graph handling, clustering\nand scissor to sub-graphs
activate LvGraphHandler
... ...
LvGraphHandler -> LvGridGenerator: !BuildSubGrid(...)
deactivate LvGraphHandler
LvGridGenerator -> ResultListener: !PersistSubGrid(...)
LvGridGenerator -> LvGraphHandler: !SubGridBuilt(...)

LvGraphHandler -> LvGenerator: !Done(...)
LvGenerator -> OsmoGridGuardian: !Done(...)

== Finalize ==
OsmoGridGuardian -> ResultListener: ?Finalize
ResultListener -> OsmoGridGuardian: !Done

OsmoGridGuardian -> Main: !Done
@enduml
